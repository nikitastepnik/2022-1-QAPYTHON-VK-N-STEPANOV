{
  "name": "Проверка создания пользователя с middle-name",
  "status": "failed",
  "statusDetails": {
    "message": "AssertionError: Код ответа приложения должен быть 201\nassert 210 == 201\n  +210\n  -201",
    "trace": "self = <test_api.TestApiAuthorizedUser object at 0x7fb01b9d3fd0>\ncreate_user_data_with_middle_name = {'email': 'rdEdIpzxlcshW@bk.ru', 'middle_name': 'MelissaMartinez', 'name': 'Melissa', 'password': 'JZQqyBkjPZve171', ...}\n\n    @allure.title(\"Проверка создания пользователя с middle-name\")\n    @pytest.mark.API\n    def test_post_create_user_with_middle_name_bug(self, create_user_data_with_middle_name):\n        \"\"\"\n         Тестирование: Добавление пользователя (c middle-name)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         2. Найти пользователя по email в БД\n         3. Удалить из БД ранее созданного пользователя\n         Ожидаемый результат:\n         Пользователь добавляется в БД с корректными данными (+)\n         Код ответа - 201 (\"Created\") (-)\n         Фактический результат:\n         Пользователь добавляется в БД с корректными данными\n         Код ответа - 210\n         \"\"\"\n        complex_user_data = create_user_data_with_middle_name\n        response = self.post_create_user(complex_user_data)\n        self.mysql.session.commit()\n        user_db = self.mysql.session.query(Users).filter_by(email=complex_user_data['email']).first()\n    \n        self.delete_user(complex_user_data[\"username\"])\n    \n        assert user_db.username == complex_user_data['username'], f\"Никнеймы не совпадают: В БД {user_db.username}; \" \\\n                                                                  f\"Отправлено в request body \" \\\n                                                                  f\"{complex_user_data['username']}\"\n        assert user_db.password == complex_user_data['password'], f\"Пароли не совпадают: В БД {user_db.password}; \" \\\n                                                                  f\"Отправлено в request body \" \\\n                                                                  f\"{complex_user_data['password']}\"\n        assert user_db.email == complex_user_data['email'], f\"Почтовые адреса не совпадают: В БД {user_db.email}; \" \\\n                                                            f\"Отправлено в request body \" \\\n                                                            f\"{complex_user_data['email']}\"\n        assert user_db.name == complex_user_data['name'], f\"Имена не совпадают: В БД {user_db.name}; \" \\\n                                                          f\"Отправлено в request body \" \\\n                                                          f\"{complex_user_data['name']}\"\n        assert user_db.surname == complex_user_data['surname'], f\"Фамилии не совпадают: В БД {user_db.surname}; \" \\\n                                                                f\"Отправлено в request body \" \\\n                                                                f\"{complex_user_data['surname']}\"\n    \n        assert user_db.middle_name == complex_user_data['middle_name'], f\"Отчества не совпадают: В БД\" \\\n                                                                        f\" {user_db.middle_name}; \" \\\n                                                                        f\"Отправлено в request body \" \\\n                                                                        f\"{complex_user_data['middle_name']}\"\n        assert user_db.access == 1, \"Access по умолчанию должен быть равен 1!\"\n        assert user_db.active == 0, \"Active по умолчанию должен быть равен 0!\"\n        assert json.loads(response.text) == {\n            \"detail\": \"User was added\",\n            \"status\": \"success\"\n        }, \"Тело ответа приложения не соотв. ожидаемому\"\n>       assert response.status_code == 201, \"Код ответа приложения должен быть 201\"\nE       AssertionError: Код ответа приложения должен быть 201\nE       assert 210 == 201\nE         +210\nE         -201\n\ncomplex_user_data = {'email': 'rdEdIpzxlcshW@bk.ru', 'middle_name': 'MelissaMartinez', 'name': 'Melissa', 'password': 'JZQqyBkjPZve171', ...}\ncreate_user_data_with_middle_name = {'email': 'rdEdIpzxlcshW@bk.ru', 'middle_name': 'MelissaMartinez', 'name': 'Melissa', 'password': 'JZQqyBkjPZve171', ...}\nresponse   = <Response [210]>\nself       = <test_api.TestApiAuthorizedUser object at 0x7fb01b9d3fd0>\nuser_db    = <test_users(id='5',username='jJ5hmQ2H741DV',name='Melissa',surname='Martinez',surname='MelissaMartinez',password='JZQqyBkjPZve171',email='rdEdIpzxlcshW@bk.ru',access='1',active='0',start_active_time='None')>\n\ncode/api_myapp/test/test_api.py:135: AssertionError"
  },
  "description": "\n         Тестирование: Добавление пользователя (c middle-name)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         2. Найти пользователя по email в БД\n         3. Удалить из БД ранее созданного пользователя\n         Ожидаемый результат:\n         Пользователь добавляется в БД с корректными данными (+)\n         Код ответа - 201 (\"Created\") (-)\n         Фактический результат:\n         Пользователь добавляется в БД с корректными данными\n         Код ответа - 210\n         ",
  "steps": [
    {
      "name": "Выполняем POST запрос '/api/user'",
      "status": "passed",
      "steps": [
        {
          "name": "Выполняем запрос",
          "status": "passed",
          "parameters": [
            {
              "name": "method",
              "value": "'POST'"
            },
            {
              "name": "location",
              "value": "'/api/user'"
            },
            {
              "name": "headers",
              "value": "{'Content-Type': 'application/json'}"
            },
            {
              "name": "data",
              "value": "None"
            },
            {
              "name": "params",
              "value": "None"
            },
            {
              "name": "json",
              "value": "{'username': 'jJ5hmQ2H741DV', 'password': 'JZQqyBkjPZve171', 'email': 'rdEdIpzxlcshW@bk.ru', 'name': 'Melissa', 'surname': 'Martinez', 'middle_name': 'MelissaMartinez'}"
            }
          ],
          "start": 1653294456249,
          "stop": 1653294456262
        }
      ],
      "parameters": [
        {
          "name": "complex_data",
          "value": "{'username': 'jJ5hmQ2H741DV', 'password': 'JZQqyBkjPZve171', 'email': 'rdEdIpzxlcshW@bk.ru', 'name': 'Melissa', 'surname': 'Martinez', 'middle_name': 'MelissaMartinez'}"
        }
      ],
      "start": 1653294456249,
      "stop": 1653294456262
    },
    {
      "name": "Выполняем DELETE запрос '/api/user/'jJ5hmQ2H741DV''",
      "status": "passed",
      "steps": [
        {
          "name": "Выполняем запрос",
          "status": "passed",
          "parameters": [
            {
              "name": "method",
              "value": "'DELETE'"
            },
            {
              "name": "location",
              "value": "'/api/user/jJ5hmQ2H741DV'"
            },
            {
              "name": "headers",
              "value": "None"
            },
            {
              "name": "data",
              "value": "None"
            },
            {
              "name": "params",
              "value": "None"
            },
            {
              "name": "json",
              "value": "False"
            }
          ],
          "start": 1653294456268,
          "stop": 1653294456279
        }
      ],
      "parameters": [
        {
          "name": "username",
          "value": "'jJ5hmQ2H741DV'"
        }
      ],
      "start": 1653294456268,
      "stop": 1653294456279
    }
  ],
  "start": 1653294456249,
  "stop": 1653294456279,
  "uuid": "ea964fd6-42a6-46e7-a87b-ed0669520bc3",
  "historyId": "9cf23cc3cba1c157d4f200762bb9460c",
  "testCaseId": "cc002384ad2ac99c1d99c86c21c5d7c3",
  "fullName": "code.api_myapp.test.test_api.TestApiAuthorizedUser#test_post_create_user_with_middle_name_bug",
  "labels": [
    {
      "name": "tag",
      "value": "API"
    },
    {
      "name": "parentSuite",
      "value": "code.api_myapp.test"
    },
    {
      "name": "suite",
      "value": "test_api"
    },
    {
      "name": "subSuite",
      "value": "TestApiAuthorizedUser"
    },
    {
      "name": "host",
      "value": "deb0c69e5821"
    },
    {
      "name": "thread",
      "value": "1-MainThread"
    },
    {
      "name": "framework",
      "value": "pytest"
    },
    {
      "name": "language",
      "value": "cpython3"
    },
    {
      "name": "package",
      "value": "code.api_myapp.test.test_api"
    }
  ]
}