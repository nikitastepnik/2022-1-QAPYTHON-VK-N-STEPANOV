{"name": "Страница регистрации. Pop-up \"User already exists\" при повторении username", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?", "trace": "config = {'browser': 'chrome', 'debug_log': False, 'selenoid': 'http://selenoid_hub:4444/wd/hub', 'url': 'http://my_app:8086/', ...}\ntemp_dir = '/tmp/tests/code/ui_myapp/tests/test_ui.py::TestUIUnauthorizedUserRegistrationPage::test_reg_page_validation_already_used_user'\n\n    @pytest.fixture()\n    def driver(config, temp_dir):\n        browser = config['browser']\n        url = config['url']\n        selenoid = config['selenoid']\n        vnc = config['vnc']\n        if selenoid:\n            capabilities = {\n                'browserName': 'chrome',\n                'version': '98.0',\n            }\n            if vnc:\n                capabilities['enableVNC'] = True\n>           driver = webdriver.Remote(\n                f'http://selenoid_hub:4444/wd/hub',\n                desired_capabilities=capabilities\n            )\n\nbrowser    = 'chrome'\ncapabilities = {'browserName': 'chrome', 'version': '98.0'}\nconfig     = {'browser': 'chrome', 'debug_log': False, 'selenoid': 'http://selenoid_hub:4444/wd/hub', 'url': 'http://my_app:8086/', ...}\nselenoid   = 'http://selenoid_hub:4444/wd/hub'\ntemp_dir   = '/tmp/tests/code/ui_myapp/tests/test_ui.py::TestUIUnauthorizedUserRegistrationPage::test_reg_page_validation_already_used_user'\nurl        = 'http://my_app:8086/'\nvnc        = False\n\ncode/ui_myapp/tools/fixtures.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\n        _ignore_local_proxy = False\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'version': '98.0'}\n        command_executor = 'http://selenoid_hub:4444/wd/hub'\n        desired_capabilities = {'browserName': 'chrome', 'version': '98.0'}\n        file_detector = None\n        keep_alive = True\n        options    = None\n        proxy      = None\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'version': '98.0'}\n        parameters = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '98.0'}, 'firstMatch': [{}]}, 'desiredCapabilities': {'browserName': 'chrome', 'version': '98.0'}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n        w3c_caps   = {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '98.0'}, 'firstMatch': [{}]}\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'newSession'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '98.0'}, 'firstMatch': [{}]}, 'desiredCapabilities': {'browserName': 'chrome', 'version': '98.0'}}\n        response   = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\"}}\\n'}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3cd39f3130>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\"}}\\n'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n\nexception_class = <class 'selenium.common.exceptions.SessionNotCreatedException'>\njson       = <module 'json' from '/usr/local/lib/python3.8/json/__init__.py'>\nmessage    = 'create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?'\nresponse   = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\"}}\\n'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3cd39f3130>\nst_value   = None\nstacktrace = None\nstatus     = 'session not created'\nvalue      = {'error': 'session not created', 'message': 'create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?'}\nvalue_json = '{\"value\":{\"error\":\"session not created\",\"message\":\"create container: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\"}}\\n'\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: SessionNotCreatedException"}, "description": "\n          Тестирование: Регистрация. Username уже добавлен ранее в БД\n          Предусловия: Сгенерировать валидные данные, заменить username на\n          использованный ранее\n          Шаги:\n          1. Заполнить через UI все поля регистрации\n          Ожидаемый результат:\n          1. Пользователь остается на странице /reg (+)\n          2. Показывается pop-up, уведомляющий о том, что username уже\n          используется (+)\n          3. Пользователь с указанными данными не создается в БД (+)\n          Фактический результат:\n          1. Пользователь остается на странице /reg\n          2. Показывается pop-up, уведомляющий о том, что username уже\n          используется\n          3. Пользователь с указанными данными не создается в БД\n        ", "start": 1653227841469, "stop": 1653227841469, "uuid": "37a9fd53-1c9a-4fd0-a113-c535a6c658d2", "historyId": "b9c21ee6a5db0c6af2a2dcbff7dce741", "testCaseId": "98df6fdeaaa3fc2cfb6c58987517d852", "fullName": "code.ui_myapp.tests.test_ui.TestUIUnauthorizedUserRegistrationPage#test_reg_page_validation_already_used_user", "labels": [{"name": "tag", "value": "UI"}, {"name": "parentSuite", "value": "code.ui_myapp.tests"}, {"name": "suite", "value": "test_ui"}, {"name": "subSuite", "value": "TestUIUnauthorizedUserRegistrationPage"}, {"name": "host", "value": "58f976be43d3"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.ui_myapp.tests.test_ui"}]}