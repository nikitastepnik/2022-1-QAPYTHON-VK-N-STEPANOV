{"name": "Проверка создания пользователя по username, который уже есть в БД", "status": "failed", "statusDetails": {"message": "AssertionError: Код ответа приложения должен быть 400\nassert 401 == 400\n  +401\n  -400", "trace": "self = <test_api.TestApiAuthorizedUser object at 0x7f1d87cb1400>\ncreate_user_data_with_middle_name = {'email': '5fZN7LC1rqPONl@ya.ru', 'middle_name': 'MelissaSmith', 'name': 'Melissa', 'password': 'n6SWtCL', ...}\ncreate_user_data_without_middle_name = {'email': '4KteRXpKnh@ya.ru', 'middle_name': 'MelissaSmith', 'name': 'Jimmy', 'password': 'chklwqGlWkyscZw', ...}\n\n    @allure.title(\"Проверка создания пользователя по username, который уже есть в БД\")\n    @pytest.mark.API\n    def test_post_create_user_duplicate_data_username(self, create_user_data_with_middle_name,\n                                                      create_user_data_without_middle_name):\n        \"\"\"\n         Тестирование: Добавление пользователя с данными, которые уже есть в БД (username)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         Ожидаемый результат:\n         Код ответа - 400 (\"BAD REQUEST\") (+)\n         Пользователь НЕ добавляется в БД (+)\n         Фактический результат:\n         Код ответа - 400 (\"BAD REQUEST\")\n         Пользователь НЕ добавляется в БД\n         \"\"\"\n        complex_user_data_first = create_user_data_with_middle_name\n        username_first_user = complex_user_data_first[\"username\"]\n    \n        self.post_create_user(complex_user_data_first)\n        complex_user_data_second = create_user_data_without_middle_name\n        complex_user_data_second[\"middle_name\"] = create_user_data_with_middle_name[\"middle_name\"]\n        complex_user_data_second[\"username\"] = username_first_user\n        complex_user_data_second[\"email\"] = RandomGenerate.generate_random_email()\n        response = self.post_create_user(complex_user_data_second)\n    \n        self.mysql.session.commit()\n        user_db = self.mysql.session.query(Users).filter_by(email=complex_user_data_second['email']).first()\n    \n        assert user_db is None, \"Пользователь не должен добавляться в БД\"\n>       assert response.status_code == 400, \"Код ответа приложения должен быть 400\"\nE       AssertionError: Код ответа приложения должен быть 400\nE       assert 401 == 400\nE         +401\nE         -400\n\ncomplex_user_data_first = {'email': '5fZN7LC1rqPONl@ya.ru', 'middle_name': 'MelissaSmith', 'name': 'Melissa', 'password': 'n6SWtCL', ...}\ncomplex_user_data_second = {'email': '4KteRXpKnh@ya.ru', 'middle_name': 'MelissaSmith', 'name': 'Jimmy', 'password': 'chklwqGlWkyscZw', ...}\ncreate_user_data_with_middle_name = {'email': '5fZN7LC1rqPONl@ya.ru', 'middle_name': 'MelissaSmith', 'name': 'Melissa', 'password': 'n6SWtCL', ...}\ncreate_user_data_without_middle_name = {'email': '4KteRXpKnh@ya.ru', 'middle_name': 'MelissaSmith', 'name': 'Jimmy', 'password': 'chklwqGlWkyscZw', ...}\nresponse   = <Response [401]>\nself       = <test_api.TestApiAuthorizedUser object at 0x7f1d87cb1400>\nuser_db    = None\nusername_first_user = '48zBJ4UA6W'\n\ncode/api_myapp/test/test_api.py:341: AssertionError"}, "description": "\n         Тестирование: Добавление пользователя с данными, которые уже есть в БД (username)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         Ожидаемый результат:\n         Код ответа - 400 (\"BAD REQUEST\") (+)\n         Пользователь НЕ добавляется в БД (+)\n         Фактический результат:\n         Код ответа - 400 (\"BAD REQUEST\")\n         Пользователь НЕ добавляется в БД\n         ", "steps": [{"name": "Выполняем POST запрос '/api/user'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user'"}, {"name": "headers", "value": "{'Content-Type': 'application/json'}"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "{'username': '48zBJ4UA6W', 'password': 'n6SWtCL', 'email': '5fZN7LC1rqPONl@ya.ru', 'name': 'Melissa', 'surname': 'Smith', 'middle_name': 'MelissaSmith'}"}], "start": 1653169729080, "stop": 1653169729085}], "parameters": [{"name": "complex_data", "value": "{'username': '48zBJ4UA6W', 'password': 'n6SWtCL', 'email': '5fZN7LC1rqPONl@ya.ru', 'name': 'Melissa', 'surname': 'Smith', 'middle_name': 'MelissaSmith'}"}], "start": 1653169729080, "stop": 1653169729085}, {"name": "Выполняем POST запрос '/api/user'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user'"}, {"name": "headers", "value": "{'Content-Type': 'application/json'}"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "{'username': '48zBJ4UA6W', 'password': 'chklwqGlWkyscZw', 'email': '4KteRXpKnh@ya.ru', 'name': 'Jimmy', 'surname': 'Collins', 'middle_name': 'MelissaSmith'}"}], "start": 1653169729085, "stop": 1653169729089}], "parameters": [{"name": "complex_data", "value": "{'username': '48zBJ4UA6W', 'password': 'chklwqGlWkyscZw', 'email': '4KteRXpKnh@ya.ru', 'name': 'Jimmy', 'surname': 'Collins', 'middle_name': 'MelissaSmith'}"}], "start": 1653169729085, "stop": 1653169729090}], "start": 1653169729080, "stop": 1653169729095, "uuid": "8383ee96-cdfa-4492-851e-532f533dc00f", "historyId": "826f0a39ed8657a355e1fa28e74c37d0", "testCaseId": "6a18bfb0386de0effc11c9dcc5371113", "fullName": "code.api_myapp.test.test_api.TestApiAuthorizedUser#test_post_create_user_duplicate_data_username", "labels": [{"name": "tag", "value": "API"}, {"name": "parentSuite", "value": "code.api_myapp.test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuthorizedUser"}, {"name": "host", "value": "746153c29c11"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.api_myapp.test.test_api"}]}