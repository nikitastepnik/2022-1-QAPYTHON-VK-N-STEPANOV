{"name": "Проверка создания пользователя по email, который уже есть в БД", "status": "failed", "statusDetails": {"message": "AssertionError: Код ответа приложения должен быть 400\nassert 500 == 400\n  +500\n  -400", "trace": "self = <test_api.TestApiAuthorizedUser object at 0x7f59dc59d0a0>\ncreate_user_data_with_middle_name = {'email': 'Ar7dUDfEs@vk.com', 'middle_name': 'SharonHiggins', 'name': 'Sharon', 'password': 'dmUMV9', ...}\ncreate_user_data_without_middle_name = {'email': 'Ar7dUDfEs@vk.com', 'middle_name': 'SharonHiggins', 'name': 'Kyle', 'password': 'S2uzTiPck', ...}\n\n    @allure.title(\"Проверка создания пользователя по email, который уже есть в БД\")\n    @pytest.mark.API\n    def test_post_create_user_duplicate_data_email_bug(self, create_user_data_with_middle_name,\n                                                       create_user_data_without_middle_name):\n        \"\"\"\n         Тестирование: Добавление пользователя с данными, которые уже есть в БД (email)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         Ожидаемый результат:\n         Пользователь НЕ добавляется в БД (+)\n         Код ответа - 400 (\"BAD REQUEST\") (-)\n         Фактический результат:\n         Код ответа - 500 (\"INTERNAL SERVER ERROR\")\n         Пользователь НЕ добавляется в БД\n         \"\"\"\n        complex_user_data_first = create_user_data_with_middle_name\n        email_first_user = complex_user_data_first[\"email\"]\n    \n        self.post_create_user(complex_user_data_first)\n        complex_user_data_second = create_user_data_without_middle_name\n        complex_user_data_second[\"middle_name\"] = create_user_data_with_middle_name[\"middle_name\"]\n        complex_user_data_second[\"email\"] = email_first_user\n        complex_user_data_second[\"username\"] = RandomGenerate.generate_random_user_name()\n    \n        response = self.post_create_user(complex_user_data_second)\n        self.mysql.session.commit()\n        user_db = self.mysql.session.query(Users).filter_by(email=complex_user_data_second['username']).first()\n    \n        assert user_db is None, \"Пользователь не должен добавляться в БД\"\n>       assert response.status_code == 400, \"Код ответа приложения должен быть 400\"\nE       AssertionError: Код ответа приложения должен быть 400\nE       assert 500 == 400\nE         +500\nE         -400\n\ncomplex_user_data_first = {'email': 'Ar7dUDfEs@vk.com', 'middle_name': 'SharonHiggins', 'name': 'Sharon', 'password': 'dmUMV9', ...}\ncomplex_user_data_second = {'email': 'Ar7dUDfEs@vk.com', 'middle_name': 'SharonHiggins', 'name': 'Kyle', 'password': 'S2uzTiPck', ...}\ncreate_user_data_with_middle_name = {'email': 'Ar7dUDfEs@vk.com', 'middle_name': 'SharonHiggins', 'name': 'Sharon', 'password': 'dmUMV9', ...}\ncreate_user_data_without_middle_name = {'email': 'Ar7dUDfEs@vk.com', 'middle_name': 'SharonHiggins', 'name': 'Kyle', 'password': 'S2uzTiPck', ...}\nemail_first_user = 'Ar7dUDfEs@vk.com'\nresponse   = <Response [500]>\nself       = <test_api.TestApiAuthorizedUser object at 0x7f59dc59d0a0>\nuser_db    = None\n\ncode/api_myapp/test/test_api.py:304: AssertionError"}, "description": "\n         Тестирование: Добавление пользователя с данными, которые уже есть в БД (email)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         Ожидаемый результат:\n         Пользователь НЕ добавляется в БД (+)\n         Код ответа - 400 (\"BAD REQUEST\") (-)\n         Фактический результат:\n         Код ответа - 500 (\"INTERNAL SERVER ERROR\")\n         Пользователь НЕ добавляется в БД\n         ", "steps": [{"name": "Выполняем POST запрос '/api/user'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user'"}, {"name": "headers", "value": "{'Content-Type': 'application/json'}"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "{'username': 'wDirmTJ', 'password': 'dmUMV9', 'email': 'Ar7dUDfEs@vk.com', 'name': 'Sharon', 'surname': 'Higgins', 'middle_name': 'SharonHiggins'}"}], "start": 1653169897804, "stop": 1653169897818}], "parameters": [{"name": "complex_data", "value": "{'username': 'wDirmTJ', 'password': 'dmUMV9', 'email': 'Ar7dUDfEs@vk.com', 'name': 'Sharon', 'surname': 'Higgins', 'middle_name': 'SharonHiggins'}"}], "start": 1653169897804, "stop": 1653169897818}, {"name": "Выполняем POST запрос '/api/user'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user'"}, {"name": "headers", "value": "{'Content-Type': 'application/json'}"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "{'username': 'TEB1bJC', 'password': 'S2uzTiPck', 'email': 'Ar7dUDfEs@vk.com', 'name': 'Kyle', 'surname': 'Huffman', 'middle_name': 'SharonHiggins'}"}], "start": 1653169897818, "stop": 1653169897837}], "parameters": [{"name": "complex_data", "value": "{'username': 'TEB1bJC', 'password': 'S2uzTiPck', 'email': 'Ar7dUDfEs@vk.com', 'name': 'Kyle', 'surname': 'Huffman', 'middle_name': 'SharonHiggins'}"}], "start": 1653169897818, "stop": 1653169897837}], "start": 1653169897804, "stop": 1653169897843, "uuid": "2ffc46b4-a726-49ad-ae72-a1c7133cd5e0", "historyId": "9c6e8e60b473a7fa50f9375dae1e84a0", "testCaseId": "4ee2e7fff953b29fe95ef3042cddb251", "fullName": "code.api_myapp.test.test_api.TestApiAuthorizedUser#test_post_create_user_duplicate_data_email_bug", "labels": [{"name": "tag", "value": "API"}, {"name": "parentSuite", "value": "code.api_myapp.test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuthorizedUser"}, {"name": "host", "value": "02d797f6fb3c"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.api_myapp.test.test_api"}]}