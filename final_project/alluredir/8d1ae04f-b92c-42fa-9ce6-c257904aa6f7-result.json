{"name": "Разблокировка ранее заблокированного пользователя", "status": "failed", "statusDetails": {"message": "AssertionError: Тело ответа приложения не соотв. ожидаемому. В 'status' не должно быть значение 'failed'\nassert {'detail': 'U...us': 'failed'} == {'detail': 'U... 'status': ''}\n  Omitting 1 identical items, use -vv to show\n  Differing items:\n  {'status': 'failed'} != {'status': ''}\n  Full diff:\n  - {'detail': 'User access granted', 'status': ''}\n  + {'detail': 'User access granted', 'status': 'failed'}\n  ?                                              ++++++", "trace": "self = <test_api.TestApiAuthorizedUser object at 0x7ff025ead070>\n\n    @allure.title(\"Разблокировка ранее заблокированного пользователя\")\n    @pytest.mark.API\n    def test_post_unblock_blocked_user_bug(self):\n        \"\"\"\n         Тестирование: Разблокировка ранее заблокированного пользователя\n         Эндпоинт: POST http://127.0.0.1:8086/api/user/{username}/accept\n         Предусловия: Авторизация, заблокировать рандомного пользователя\n         Шаги:\n         1. Вытащить из БД значение username, access для заблокированного пользователя (access == 0)\n         2. Отправка запроса по API для смены флага доступа (разблокировки пользователя) - POST\n         http://127.0.0.1:8086/api/user/{username}/accept\n         Ожидаемый результат:\n         Код ответа - 200 (\"OK\") (+)\n         Информативное корректное сообщение, о том, что пользователь разблокирован (-)\n         Фактический результат:\n         Код ответа - 200 (\"OK\") (+)\n         Информативное корректное сообщение, о том, что пользователь разблокирован\n         \"\"\"\n    \n        user_db = self.mysql.session.query(Users).order_by(Users.password).filter_by(access=1).first()\n        username = user_db.username\n    \n        self.post_block_user(username)\n    \n        self.mysql.session.commit()\n    \n        response = self.post_unblock_user(username)\n    \n        assert response.status_code == 200, \"Код ответа приложения должен быть 200\"\n>       assert json.loads(response.text) == {\n            \"detail\": \"User access granted\",\n            \"status\": \"\"\n        }, \"Тело ответа приложения не соотв. ожидаемому. В 'status' не должно быть значение 'failed'\"\nE       AssertionError: Тело ответа приложения не соотв. ожидаемому. В 'status' не должно быть значение 'failed'\nE       assert {'detail': 'U...us': 'failed'} == {'detail': 'U... 'status': ''}\nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'status': 'failed'} != {'status': ''}\nE         Full diff:\nE         - {'detail': 'User access granted', 'status': ''}\nE         + {'detail': 'User access granted', 'status': 'failed'}\nE         ?                                              ++++++\n\nresponse   = <Response [200]>\nself       = <test_api.TestApiAuthorizedUser object at 0x7ff025ead070>\nuser_db    = <test_users(id='13',username='vyVC93P71Qn',name='Lisa',surname='Cook',surname='LisaCook',password='0VkIEJ',email='97sDcNnjED@gmail.com',access='1',active='0',start_active_time='None')>\nusername   = 'vyVC93P71Qn'\n\ncode/api_myapp/test/test_api.py:753: AssertionError"}, "description": "\n         Тестирование: Разблокировка ранее заблокированного пользователя\n         Эндпоинт: POST http://127.0.0.1:8086/api/user/{username}/accept\n         Предусловия: Авторизация, заблокировать рандомного пользователя\n         Шаги:\n         1. Вытащить из БД значение username, access для заблокированного пользователя (access == 0)\n         2. Отправка запроса по API для смены флага доступа (разблокировки пользователя) - POST\n         http://127.0.0.1:8086/api/user/{username}/accept\n         Ожидаемый результат:\n         Код ответа - 200 (\"OK\") (+)\n         Информативное корректное сообщение, о том, что пользователь разблокирован (-)\n         Фактический результат:\n         Код ответа - 200 (\"OK\") (+)\n         Информативное корректное сообщение, о том, что пользователь разблокирован\n         ", "steps": [{"name": "Выполняем POST запрос '/api/user/'vyVC93P71Qn'/block'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user/vyVC93P71Qn/block'"}, {"name": "headers", "value": "None"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "False"}], "start": 1653228035088, "stop": 1653228035100}], "parameters": [{"name": "username", "value": "'vyVC93P71Qn'"}], "start": 1653228035088, "stop": 1653228035100}, {"name": "Выполняем POST запрос '/api/user/'vyVC93P71Qn'/accept'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user/vyVC93P71Qn/accept'"}, {"name": "headers", "value": "None"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "False"}], "start": 1653228035101, "stop": 1653228035113}], "parameters": [{"name": "username", "value": "'vyVC93P71Qn'"}], "start": 1653228035101, "stop": 1653228035113}], "start": 1653228035080, "stop": 1653228035114, "uuid": "db85518b-32f4-4f98-85d5-c543e9e153b1", "historyId": "27cdcf232f4fb9b744d4d7a3291fff25", "testCaseId": "70c6bb4cf3aacfac37818a33a7dbe105", "fullName": "code.api_myapp.test.test_api.TestApiAuthorizedUser#test_post_unblock_blocked_user_bug", "labels": [{"name": "tag", "value": "API"}, {"name": "parentSuite", "value": "code.api_myapp.test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuthorizedUser"}, {"name": "host", "value": "231601d32f81"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.api_myapp.test.test_api"}]}