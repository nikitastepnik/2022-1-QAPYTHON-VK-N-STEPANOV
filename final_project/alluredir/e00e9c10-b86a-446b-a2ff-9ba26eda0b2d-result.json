{"name": "Проверка создания пользователя без middle-name", "status": "failed", "statusDetails": {"message": "AssertionError: Код ответа приложения должен быть 201\nassert 210 == 201\n  +210\n  -201", "trace": "self = <test_api.TestApiAuthorizedUser object at 0x7f92d7ddd5b0>\ncreate_user_data_without_middle_name = {'email': 'UHy30IKuo6v@ya.ru', 'name': 'Regina', 'password': 'zy0xDR9', 'surname': 'Smith', ...}\n\n    @allure.title(\"Проверка создания пользователя без middle-name\")\n    @pytest.mark.API\n    def test_post_create_user_without_middle_name_bug(self, create_user_data_without_middle_name):\n        \"\"\"\n         Тестирование: Добавление пользователя (без middle-name)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         2. Найти пользователя по email в БД\n         3. Удалить из БД раннее созданного пользователя\n         Ожидаемый результат:\n         Пользователь добавляется в БД с корректными данными (+)\n         Код ответа - 201 (\"Created\") (-)\n         Фактический результат:\n         Пользователь добавляется в БД с корректными данными\n         Код ответа - 210\n         \"\"\"\n        complex_user_data = create_user_data_without_middle_name\n        self.mysql.session.commit()\n        response = self.post_create_user(complex_user_data)\n        user_db = self.mysql.session.query(Users).filter_by(email=complex_user_data['email']).first()\n    \n        self.delete_user(complex_user_data[\"username\"])\n    \n        assert user_db.username == complex_user_data['username'], f\"Никнеймы не совпадают: В БД {user_db.username}; \" \\\n                                                                  f\"Отправлено в request body \" \\\n                                                                  f\"{complex_user_data['username']}\"\n        assert user_db.password == complex_user_data['password'], f\"Пароли не совпадают: В БД {user_db.password}; \" \\\n                                                                  f\"Отправлено в request body \" \\\n                                                                  f\"{complex_user_data['password']}\"\n        assert user_db.email == complex_user_data['email'], f\"Почтовые адреса не совпадают: В БД {user_db.email}; \" \\\n                                                            f\"Отправлено в request body \" \\\n                                                            f\"{complex_user_data['email']}\"\n        assert user_db.name == complex_user_data['name'], f\"Имена не совпадают: В БД {user_db.name}; \" \\\n                                                          f\"Отправлено в request body \" \\\n                                                          f\"{complex_user_data['name']}\"\n        assert user_db.surname == complex_user_data['surname'], f\"Фамилии не совпадают: В БД {user_db.surname}; \" \\\n                                                                f\"Отправлено в request body \" \\\n                                                                f\"{complex_user_data['surname']}\"\n    \n        assert user_db.middle_name is None\n        assert user_db.access == 1, \"Access по умолчанию должен быть равен 1!\"\n        assert user_db.active == 0, \"Active по умолчанию должен быть равен 0!\"\n        assert json.loads(response.text) == {\n            \"detail\": \"User was added\",\n            \"status\": \"success\"\n        }, \"Тело ответа приложения не соотв. ожидаемому\"\n>       assert response.status_code == 201, \"Код ответа приложения должен быть 201\"\nE       AssertionError: Код ответа приложения должен быть 201\nE       assert 210 == 201\nE         +210\nE         -201\n\ncomplex_user_data = {'email': 'UHy30IKuo6v@ya.ru', 'name': 'Regina', 'password': 'zy0xDR9', 'surname': 'Smith', ...}\ncreate_user_data_without_middle_name = {'email': 'UHy30IKuo6v@ya.ru', 'name': 'Regina', 'password': 'zy0xDR9', 'surname': 'Smith', ...}\nresponse   = <Response [210]>\nself       = <test_api.TestApiAuthorizedUser object at 0x7f92d7ddd5b0>\nuser_db    = <test_users(id='14',username='tSu2SBqsPsNGMQ',name='Regina',surname='Smith',surname='None',password='zy0xDR9',email='UHy30IKuo6v@ya.ru',access='1',active='0',start_active_time='None')>\n\ncode/api_myapp/test/test_api.py:82: AssertionError"}, "description": "\n         Тестирование: Добавление пользователя (без middle-name)\n         Эндпоинт: POST http://127.0.0.1:8086/api/user\n         Предусловия: Авторизация, создание пользовательских данных\n         Шаги:\n         1. Отправка запроса по API\n         2. Найти пользователя по email в БД\n         3. Удалить из БД раннее созданного пользователя\n         Ожидаемый результат:\n         Пользователь добавляется в БД с корректными данными (+)\n         Код ответа - 201 (\"Created\") (-)\n         Фактический результат:\n         Пользователь добавляется в БД с корректными данными\n         Код ответа - 210\n         ", "steps": [{"name": "Выполняем POST запрос '/api/user'", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'POST'"}, {"name": "location", "value": "'/api/user'"}, {"name": "headers", "value": "{'Content-Type': 'application/json'}"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "{'username': 'tSu2SBqsPsNGMQ', 'password': 'zy0xDR9', 'email': 'UHy30IKuo6v@ya.ru', 'name': 'Regina', 'surname': 'Smith'}"}], "start": 1653222983350, "stop": 1653222983365}], "parameters": [{"name": "complex_data", "value": "{'username': 'tSu2SBqsPsNGMQ', 'password': 'zy0xDR9', 'email': 'UHy30IKuo6v@ya.ru', 'name': 'Regina', 'surname': 'Smith'}"}], "start": 1653222983350, "stop": 1653222983365}, {"name": "Выполняем DELETE запрос '/api/user/'tSu2SBqsPsNGMQ''", "status": "passed", "steps": [{"name": "Выполняем запрос", "status": "passed", "parameters": [{"name": "method", "value": "'DELETE'"}, {"name": "location", "value": "'/api/user/tSu2SBqsPsNGMQ'"}, {"name": "headers", "value": "None"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "False"}], "start": 1653222983372, "stop": 1653222983386}], "parameters": [{"name": "username", "value": "'tSu2SBqsPsNGMQ'"}], "start": 1653222983372, "stop": 1653222983386}], "start": 1653222983349, "stop": 1653222983386, "uuid": "1738b352-01c1-418b-a4e9-07c329e170c8", "historyId": "7b6f29966895bbbfc73b99f7afd8e183", "testCaseId": "ae17145993cbc2d5685269c631f97934", "fullName": "code.api_myapp.test.test_api.TestApiAuthorizedUser#test_post_create_user_without_middle_name_bug", "labels": [{"name": "tag", "value": "API"}, {"name": "parentSuite", "value": "code.api_myapp.test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuthorizedUser"}, {"name": "host", "value": "ea2772a1407d"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.api_myapp.test.test_api"}]}