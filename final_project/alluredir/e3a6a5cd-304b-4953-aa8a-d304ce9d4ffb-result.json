{"name": "Получение VK ID несуществующего пользователя (mock)", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL '/vk_id/None': No scheme supplied. Perhaps you meant http:///vk_id/None?", "trace": "self = <test_api.TestApiAuthorizedUser object at 0x7f59dc5ac9d0>\n\n    @allure.title(\"Получение VK ID несуществующего пользователя (mock)\")\n    @pytest.mark.API\n    def test_get_vk_id_for_null_user(self):\n        \"\"\"\n         Тестирование: Получение VK ID несущетсвующего (None) пользователя (mock)\n         Эндпоинт: GET http://<VK_URL>/vk_id/<username>\n         Предусловия: Запущен контейнер с моком, запущено приложение, mock корректно работает в приложении (в правом\n         верхнем углу виден VK ID)\n         Шаги:\n         1. Отправить запрос по API для получения VK_ID - GET http://<VK_URL>/vk_id/{username}; В кач-ве {username}\n         использовать сущность языка Python - None\n         Ожидаемый результат:\n         Код ответа - 404 (\"NOT FOUND\") (+)\n         Выводится информативное сообщение, что VK_ID для рассматриваемого пользователя не найдено  (+)\n         Фактический результат:\n         Код ответа - 404 (\"NOT FOUND\")\n         Выводится информативное сообщение, что VK_ID для рассматриваемого пользователя не найдено\n         \"\"\"\n    \n        username = None\n    \n>       response = self.get_vk_id_from_mock(username)\n\nself       = <test_api.TestApiAuthorizedUser object at 0x7f59dc5ac9d0>\nusername   = None\n\ncode/api_myapp/test/test_api.py:861: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncode/api_myapp/test/base_api.py:60: in get_vk_id_from_mock\n    response = self.api_client._request(method=\"GET\", location=f\"/vk_id/{username}\", url=vk_mock_url)\n        self       = <test_api.TestApiAuthorizedUser object at 0x7f59dc5ac9d0>\n        username   = None\ncode/api_myapp/api_client.py:39: in _request\n    response = self.session.request(method=method, url=url, headers=headers, data=data,\n        allow_redirects = False\n        data       = None\n        headers    = None\n        json       = None\n        location   = '/vk_id/None'\n        method     = 'GET'\n        params     = None\n        self       = <api_client.ApiClient object at 0x7f59dbb21e80>\n        url        = '/vk_id/None'\n/usr/local/lib/python3.8/site-packages/requests/sessions.py:515: in request\n    prep = self.prepare_request(req)\n        allow_redirects = False\n        auth       = None\n        cert       = None\n        cookies    = <RequestsCookieJar[Cookie(version=0, name='session', value='.eJwdzrsRwjAMANBdXFNItvVxlslZlnTQJqTi2J0cE7z3KXsecT7L9j6ue...ue, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)]>\n        data       = None\n        files      = None\n        headers    = None\n        hooks      = None\n        json       = None\n        method     = 'GET'\n        params     = None\n        proxies    = None\n        req        = <Request [GET]>\n        self       = <requests.sessions.Session object at 0x7f59dbb21910>\n        stream     = None\n        timeout    = None\n        url        = '/vk_id/None'\n        verify     = None\n/usr/local/lib/python3.8/site-packages/requests/sessions.py:443: in prepare_request\n    p.prepare(\n        auth       = None\n        cookies    = <RequestsCookieJar[Cookie(version=0, name='session', value='.eJwdzrsRwjAMANBdXFNItvVxlslZlnTQJqTi2J0cE7z3KXsecT7L9j6ue...ue, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)]>\n        merged_cookies = <RequestsCookieJar[Cookie(version=0, name='session', value='.eJwdzrsRwjAMANBdXFNItvVxlslZlnTQJqTi2J0cE7z3KXsecT7L9j6ue...ue, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)]>\n        p          = <PreparedRequest [GET]>\n        request    = <Request [GET]>\n        self       = <requests.sessions.Session object at 0x7f59dbb21910>\n/usr/local/lib/python3.8/site-packages/requests/models.py:318: in prepare\n    self.prepare_url(url, params)\n        auth       = None\n        cookies    = <RequestsCookieJar[Cookie(version=0, name='session', value='.eJwdzrsRwjAMANBdXFNItvVxlslZlnTQJqTi2J0cE7z3KXsecT7L9j6ue...ue, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)]>\n        data       = {}\n        files      = []\n        headers    = {}\n        hooks      = {'response': []}\n        json       = None\n        method     = 'GET'\n        params     = OrderedDict()\n        self       = <PreparedRequest [GET]>\n        url        = '/vk_id/None'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [GET]>, url = '/vk_id/None', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No scheme supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL '/vk_id/None': No scheme supplied. Perhaps you meant http:///vk_id/None?\n\nauth       = None\nerror      = \"Invalid URL '/vk_id/None': No scheme supplied. Perhaps you meant http:///vk_id/None?\"\nfragment   = None\nhost       = None\nparams     = OrderedDict()\npath       = '/vk_id/None'\nport       = None\nquery      = None\nscheme     = None\nself       = <PreparedRequest [GET]>\nurl        = '/vk_id/None'\n\n/usr/local/lib/python3.8/site-packages/requests/models.py:392: MissingSchema"}, "description": "\n         Тестирование: Получение VK ID несущетсвующего (None) пользователя (mock)\n         Эндпоинт: GET http://<VK_URL>/vk_id/<username>\n         Предусловия: Запущен контейнер с моком, запущено приложение, mock корректно работает в приложении (в правом\n         верхнем углу виден VK ID)\n         Шаги:\n         1. Отправить запрос по API для получения VK_ID - GET http://<VK_URL>/vk_id/{username}; В кач-ве {username}\n         использовать сущность языка Python - None\n         Ожидаемый результат:\n         Код ответа - 404 (\"NOT FOUND\") (+)\n         Выводится информативное сообщение, что VK_ID для рассматриваемого пользователя не найдено  (+)\n         Фактический результат:\n         Код ответа - 404 (\"NOT FOUND\")\n         Выводится информативное сообщение, что VK_ID для рассматриваемого пользователя не найдено\n         ", "steps": [{"name": "Выполняем GET запрос 'http://<VK_URL>/vk_id/<username>'", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL '/vk_id/None': No scheme supplied. Perhaps you meant http:///vk_id/None?\n", "trace": "  File \"/usr/local/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/final_project/code/api_myapp/test/base_api.py\", line 60, in get_vk_id_from_mock\n    response = self.api_client._request(method=\"GET\", location=f\"/vk_id/{username}\", url=vk_mock_url)\n  File \"/usr/local/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/final_project/code/api_myapp/api_client.py\", line 39, in _request\n    response = self.session.request(method=method, url=url, headers=headers, data=data,\n  File \"/usr/local/lib/python3.8/site-packages/requests/sessions.py\", line 515, in request\n    prep = self.prepare_request(req)\n  File \"/usr/local/lib/python3.8/site-packages/requests/sessions.py\", line 443, in prepare_request\n    p.prepare(\n  File \"/usr/local/lib/python3.8/site-packages/requests/models.py\", line 318, in prepare\n    self.prepare_url(url, params)\n  File \"/usr/local/lib/python3.8/site-packages/requests/models.py\", line 392, in prepare_url\n    raise MissingSchema(error)\n"}, "steps": [{"name": "Выполняем запрос", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL '/vk_id/None': No scheme supplied. Perhaps you meant http:///vk_id/None?\n", "trace": "  File \"/usr/local/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/final_project/code/api_myapp/api_client.py\", line 39, in _request\n    response = self.session.request(method=method, url=url, headers=headers, data=data,\n  File \"/usr/local/lib/python3.8/site-packages/requests/sessions.py\", line 515, in request\n    prep = self.prepare_request(req)\n  File \"/usr/local/lib/python3.8/site-packages/requests/sessions.py\", line 443, in prepare_request\n    p.prepare(\n  File \"/usr/local/lib/python3.8/site-packages/requests/models.py\", line 318, in prepare\n    self.prepare_url(url, params)\n  File \"/usr/local/lib/python3.8/site-packages/requests/models.py\", line 392, in prepare_url\n    raise MissingSchema(error)\n"}, "parameters": [{"name": "method", "value": "'GET'"}, {"name": "location", "value": "'/vk_id/None'"}, {"name": "headers", "value": "None"}, {"name": "data", "value": "None"}, {"name": "params", "value": "None"}, {"name": "json", "value": "False"}, {"name": "url", "value": "'vk_api:8787'"}], "start": 1653169899940, "stop": 1653169899940}], "parameters": [{"name": "username", "value": "None"}], "start": 1653169899940, "stop": 1653169899940}], "start": 1653169899939, "stop": 1653169899941, "uuid": "a3eb477d-1b35-4cd4-a6bd-986d7e2b2140", "historyId": "aef427d38ffbf6d10f106e1b12cdab16", "testCaseId": "011307ca2a069553289c332d82964830", "fullName": "code.api_myapp.test.test_api.TestApiAuthorizedUser#test_get_vk_id_for_null_user", "labels": [{"name": "tag", "value": "API"}, {"name": "parentSuite", "value": "code.api_myapp.test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuthorizedUser"}, {"name": "host", "value": "02d797f6fb3c"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.api_myapp.test.test_api"}]}